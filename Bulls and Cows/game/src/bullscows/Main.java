package bullscows;

import java.util.*;

/**  Created by Jose Santillan

    My first project using Java to create a functional game of Bulls and Cows, capable of
    handling exceptions, as well as the addition of customizable settings
 */

public class Main {
    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        System.out.println("Please, enter the secret code's length:");
        int cLen;
        int range = 0;
        try {
            cLen = scan.nextInt();
            if (cLen > 36 || cLen < 1) {
                System.out.println("Error: max value is 36, min is 1");
                cLen = 10000;
            }
        } catch (Exception e) {
            System.out.println("Error: the value you input is not a valid number");
            cLen = 10000;
        }
        if (cLen != 10000) {
            System.out.println("Range of Characters?");
            range = scan.nextInt();
        }
        if (range > 36 || range < 0) {
            System.out.println("Error: maximum number of possible symbols in the code is 36");
            range = -1;
        }
        if (cLen <= range) {
            String code = pseudoRandomNumber(cLen, range);
            System.out.println("The secret is prepared:" + "*".repeat(cLen) + ran(range));
            int turn = 1;
            while (true) {
                System.out.println("Turn" + turn + ":");
                String guess = scan.next();
                String outcome = Grade(code, guess, cLen);
                System.out.println(outcome);
                if (outcome.contains("Congratulations")) {
                    break;
                }
                turn++;
            }
        } else {
            if (range != -1) {
                System.out.println("Error: not possible to generate a code with a length greater than the possible range");
            }
        }
    }

    /**
        @param code
        The code generated by pseudoRandomNumber as a string
        @param guess
        The guess that was input by the player as a string
        @param numDigits
        The number of digits/characters the code contains
        @return
        The score (in terms of bulls and cows) of the guess by the player when compared to the code
    */

    public static String Grade(String code, String guess, int numDigits) {
        String[] code1 = code.split("");
        String[] guess1 = guess.split("");
        int bull = 0;
        int cow = 0;
        for (int i = 0; i < numDigits; i++) {
            if (guess1[i].equals(code1[i])) {
                bull++;
            } else if (code.contains(guess1[i])) {
                cow++;
            }
        }
        if (bull != 0 && cow != 0) {
            return "Grade: " + bull + " bull(s) and " + cow + " cows(s).";
        }
        if (bull == 0 && cow == 0) {
            return ("Grade: None.");
        }
        if (bull == numDigits) {
            return "Grade: " + bull + " bull(s).\nCongratulations! You win!";
        }
        if (cow == 0) {
            return "Grade: " + bull + " bull(s).";
        }
        if (bull == 0) {
            return ("Grade: " + cow + " cow(s).");
        }
        return "-1";
    }

    /**
     *
     * @param number How many random numbers to generate
     * @param range  The possible range of characters that can be in the code
     * @return A nearly random combination of unique letters and numbers
     */
    public static String pseudoRandomNumber(int number, int range) {
            Random rand = new Random();
            StringBuilder sb = new StringBuilder();
            for (int i = 0; i < number; i++){
                int x = rand.nextInt(range) + 48;
                if (x > 57) {
                    x += 7;
                    char c = (char) x;
                    if (!sb.toString().contains(Character.toString(c))){
                        sb.append(c);
                    } else {
                        i--;
                    }
                }else if (x <= 57){
                    char c = (char) x;
                    if (!sb.toString().contains(Character.toString(c))){
                        sb.append(c);
                    } else {
                        i--;
                    }
                }
            }
        return sb.toString().toLowerCase();
    }

    /**
     *
     * @param x the range of numbers inputted by user
     * @return the range of characters possibly contained in the secret code
     */
    public static String ran(int x) {
        if (x <= 10){
            return "(0-" + (x - 1) + ")";
        } else if (x > 10){
            char c = (char) (x + 86);
            return "(0-9, a-" + c + ")";
        }
        return null;
    }
}
